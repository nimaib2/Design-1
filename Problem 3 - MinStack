// Time Complexity : O(1)
// Space Complexity : O(N)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : I mainly overcomplicated the push method, as I thought that minStack had to keep track of all elements instead of just the minimum element, but that was the only problem I had.


// Your code here along with comments explaining your approach
My approach was to create a stack with all the numbers and another stack tracking the minimum number. the stack with all numbers would work as a normal stack, with push and pop in the MinStack class just calling push and 
pop from the Stack class. For minStack, the process was similar, except I would just push the minimum of the value on top of minStack and the value being pushed. 

class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    public MinStack() {
        stack = new Stack<Integer>();
        minStack = new Stack<Integer>();
    }
    
    public void push(int val) {
        stack.push(val);
        if (minStack.isEmpty()) {
            minStack.push(val);
        } else {
            minStack.push(Math.min(val, minStack.peek()));
        }
    }
    
    public void pop() {
        minStack.pop();
        stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
